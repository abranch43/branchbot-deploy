from __future__ import annotations

import argparse
import json
from datetime import datetime, timezone
from pathlib import Path


def generate_sample(out_dir: Path) -> None:
    receipts_dir = out_dir / "receipts"
    pdfs_dir = out_dir / "pdfs"
    receipts_dir.mkdir(parents=True, exist_ok=True)
    pdfs_dir.mkdir(parents=True, exist_ok=True)

    # JSON receipt (sample)
    receipt = {
        "id": "MO-BUYS-SAMPLE-001",
        "issued_at": datetime.now(timezone.utc).isoformat(),
        "buyer": {"name": "Sample Buyer", "email": "buyer@example.com"},
        "items": [{"sku": "FORM-001", "qty": 1, "price": 0}],
        "total": 0,
        "currency": "USD",
        "note": "Sample receipt generated by scaffold."
    }
    (receipts_dir / "receipt.sample.json").write_text(
        json.dumps(receipt, indent=2), encoding="utf-8"
    )

    # Minimal PDF placeholder (not a real filled form)
    pdf_header = b"%PDF-1.4\n% placeholder compliance form PDF\n"
    (pdfs_dir / "form.sample.pdf").write_bytes(pdf_header)


def main() -> None:
    parser = argparse.ArgumentParser(
        description="Generate Compliance Pack artifacts (sample scaffold)."
    )
    parser.add_argument(
        "--out", default="out/contracts", help="Output directory (default: out/contracts)"
    )
    args = parser.parse_args()

    out_dir = Path(args.out)
    generate_sample(out_dir)
    print(f"Wrote sample artifacts to {out_dir.resolve()}")


if __name__ == "__main__":
    main()
