from __future__ import annotations

import argparse
import json
from datetime import datetime, timezone
from io import BytesIO
from pathlib import Path


def write_minimal_pdf(path: Path, text: str = "Compliance Form Sample") -> None:
    buf = BytesIO()
    w = lambda s: buf.write(s if isinstance(s, bytes) else s.encode("latin-1"))
    w("%PDF-1.4\n")

    offsets = []
    # 1: Catalog
    offsets.append(buf.tell())
    w("1 0 obj\n<< /Type /Catalog /Pages 2 0 R >>\nendobj\n")
    # 2: Pages
    offsets.append(buf.tell())
    w("2 0 obj\n<< /Type /Pages /Kids [3 0 R] /Count 1 >>\nendobj\n")
    # 3: Page
    offsets.append(buf.tell())
    w(
        "3 0 obj\n<< /Type /Page /Parent 2 0 R /MediaBox [0 0 612 792] "
        "/Contents 4 0 R /Resources << /Font << /F1 5 0 R >> >> >>\nendobj\n"
    )
    # 4: Contents stream
    content_stream = f"BT /F1 18 Tf 72 720 Td ({text}) Tj ET"
    cb = content_stream.encode("latin-1")
    offsets.append(buf.tell())
    w(f"4 0 obj\n<< /Length {len(cb)} >>\nstream\n")
    w(cb)
    w("\nendstream\nendobj\n")
    # 5: Font
    offsets.append(buf.tell())
    w("5 0 obj\n<< /Type /Font /Subtype /Type1 /BaseFont /Helvetica >>\nendobj\n")

    xref_pos = buf.tell()
    w("xref\n0 6\n")
    w("%010d %05d f \n" % (0, 65535))
    for off in offsets:
        w("%010d 00000 n \n" % off)
    w("trailer\n<< /Size 6 /Root 1 0 R >>\nstartxref\n%d\n%%EOF\n" % xref_pos)

    path.write_bytes(buf.getvalue())


def generate_sample(out_dir: Path) -> None:
    receipts_dir = out_dir / "receipts"
    pdfs_dir = out_dir / "pdfs"
    receipts_dir.mkdir(parents=True, exist_ok=True)
    pdfs_dir.mkdir(parents=True, exist_ok=True)

    # JSON receipt (sample, valid JSON)
    receipt = {
        "id": "MO-BUYS-SAMPLE-001",
        "issued_at": datetime.now(timezone.utc).isoformat(),
        "buyer": {"name": "Sample Buyer", "email": "buyer@example.com"},
        "items": [{"sku": "FORM-001", "qty": 1, "price": 0}],
        "total": 0,
        "currency": "USD",
        "note": "Sample receipt generated by scaffold.",
    }
    (receipts_dir / "receipt.sample.json").write_text(
        json.dumps(receipt, indent=2), encoding="utf-8"
    )

    # Minimal valid PDF
    write_minimal_pdf(pdfs_dir / "form.sample.pdf", text="MO BUYS Compliance Form (Sample)")


def main() -> None:
    parser = argparse.ArgumentParser(description="Generate Compliance Pack artifacts (sample).")
    parser.add_argument("--out", default="out/contracts", help="Output directory (default: out/contracts)")
    args = parser.parse_args()

    out_dir = Path(args.out)
    generate_sample(out_dir)
    print(f"Wrote sample artifacts to {out_dir.resolve()}")


if __name__ == "__main__":
    main()
