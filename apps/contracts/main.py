from __future__ import annotations

import argparse
import json
from datetime import datetime, timezone
from pathlib import Path
import sys as _sys
from pathlib import Path as _P

if __package__ in (None, ""):
    # Ensure repo root is importable when executed as a script
    _sys.path.insert(0, str(_P(__file__).resolve().parents[2]))

from apps.common.pdf import write_minimal_pdf  # noqa: E402


def _write_pdf(path: Path, text: str = "Compliance Form Sample") -> None:
    write_minimal_pdf(path, text)


def generate_sample(out_dir: Path) -> None:
    receipts_dir = out_dir / "receipts"
    pdfs_dir = out_dir / "pdfs"
    receipts_dir.mkdir(parents=True, exist_ok=True)
    pdfs_dir.mkdir(parents=True, exist_ok=True)

    # JSON receipt (sample, valid JSON)
    receipt = {
        "id": "MO-BUYS-SAMPLE-001",
        "issued_at": datetime.now(timezone.utc).isoformat(),
        "buyer": {"name": "Sample Buyer", "email": "buyer@example.com"},
        "items": [{"sku": "FORM-001", "qty": 1, "price": 0}],
        "total": 0,
        "currency": "USD",
        "note": "Sample receipt generated by scaffold.",
    }
    (receipts_dir / "receipt.sample.json").write_text(
        json.dumps(receipt, indent=2), encoding="utf-8"
    )

    # Minimal valid PDF
    _write_pdf(pdfs_dir / "form.sample.pdf", text="MO BUYS Compliance Form (Sample)")


def main() -> None:
    parser = argparse.ArgumentParser(description="Generate Compliance Pack artifacts (sample).")
    parser.add_argument("--out", default="out/contracts", help="Output directory (default: out/contracts)")
    args = parser.parse_args()

    out_dir = Path(args.out)
    generate_sample(out_dir)
    print(f"Wrote sample artifacts to {out_dir.resolve()}")


if __name__ == "__main__":
    main()
